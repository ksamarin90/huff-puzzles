
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)

#define macro TRUE_MULTIPLY() = takes(0) returns(0) {
    0x04 calldataload
    0x24 calldataload
    mul
    0x00 mstore
    0x20 0x00 return
}

// template <throw_error_jump_label>
#define macro MULTIPLY() = takes(0) returns(0) {
    0x04 calldataload // a
    dup1 // a a
    iszero true_multiply jumpi

    0x24 calldataload // b a
    dup2 // a b a
    mul // (a * b) a
    div // ((b * a) / a)
    0x24 calldataload // b ((b * a) / a)

    eq true_multiply jumpi

    0x00 0x00 revert

    true_multiply:
        TRUE_MULTIPLY()
}


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(multiply) eq multiply jumpi
    0x00 0x00 revert

    multiply:
        MULTIPLY()
    throw_error:
        0x00 0x00 revert
}