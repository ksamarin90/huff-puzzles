/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro BALANCE_OF() = takes(0) returns(0) {
    0x04 calldataload
    sload
    0x00 mstore
    0x20 0x00 return
}

#define macro WITHDRAW() = takes(0) returns(0) {
    0x04 calldataload
    dup1
    0x00 mstore
    caller
    sload
    dup1
    0x20 mstore
    // check for underflow
    lt throw_error jumpi
    0x00 mload
    0x20 mload
    sub
    caller
    sstore

    0x00 // retSize
    0x00 // retOffset
    0x00 // argsSize
    0x00 // argsOffset
    0x20 0x00 mload // value
    caller // address
    0x00 // gas
    call

    0x00 0x00 return

    throw_error:
        0x00 0x00 revert
        // 0x00 mstore 
        // 0x20 0x00 return
}

#define macro RECEIVE() = takes(0) returns(0) {
    callvalue
    caller
    sstore
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    dup1 __FUNC_SIG(withdraw) eq withdraw jumpi
    0x01 receive jumpi

    balanceOf:
        BALANCE_OF()
    withdraw:
        WITHDRAW()
    receive:
        RECEIVE()
}
